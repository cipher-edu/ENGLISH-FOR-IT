# Generated by Django 5.0.14 on 2025-10-24 11:27

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=220)),
                ("learning_objectives", models.JSONField(default=list)),
                ("key_vocabulary", models.JSONField(default=list)),
                ("grammar_points", models.JSONField(default=list)),
                (
                    "lesson_type",
                    models.CharField(
                        choices=[
                            ("reading", "Reading"),
                            ("listening", "Listening"),
                            ("speaking", "Speaking"),
                            ("writing", "Writing"),
                            ("mixed", "Mixed Skills"),
                            ("assessment", "Assessment"),
                        ],
                        default="mixed",
                        max_length=20,
                    ),
                ),
                ("order", models.IntegerField()),
                (
                    "duration_minutes",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(5)]
                    ),
                ),
                ("xp_reward", models.IntegerField(default=10)),
                ("is_premium", models.BooleanField(default=False)),
                ("allow_skip", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "lessons",
                "ordering": ["module", "order"],
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=220, unique=True)),
                ("description", models.TextField()),
                ("short_description", models.CharField(max_length=255)),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("A1", "Beginner"),
                            ("A2", "Elementary"),
                            ("B1", "Intermediate"),
                            ("B2", "Upper Intermediate"),
                            ("C1", "Advanced"),
                            ("C2", "Proficient"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("general", "General IT English"),
                            ("programming", "Programming"),
                            ("business", "IT Business Communication"),
                            ("technical", "Technical Documentation"),
                            ("interview", "Job Interview Prep"),
                        ],
                        max_length=30,
                    ),
                ),
                ("tags", models.JSONField(blank=True, default=list)),
                ("thumbnail", models.ImageField(upload_to="courses/thumbnails/")),
                ("preview_video_url", models.URLField(blank=True)),
                (
                    "duration_hours",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                (
                    "difficulty",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "rating",
                    models.DecimalField(decimal_places=2, default=0, max_digits=3),
                ),
                ("total_students", models.IntegerField(default=0)),
                ("is_free", models.BooleanField(default=False)),
                ("is_published", models.BooleanField(default=False)),
                ("is_featured", models.BooleanField(default=False)),
                (
                    "price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("order", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "courses",
                "ordering": ["order", "level", "title"],
            },
        ),
        migrations.CreateModel(
            name="Block",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "block_type",
                    models.CharField(
                        choices=[
                            ("text", "Text Content"),
                            ("code", "Code Snippet"),
                            ("audio", "Audio"),
                            ("video", "Video"),
                            ("image", "Image"),
                            ("quiz", "Quiz Question"),
                            ("exercise", "Interactive Exercise"),
                            ("markdown", "Markdown Content"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200)),
                ("content", models.TextField(blank=True)),
                (
                    "media_file",
                    models.FileField(blank=True, null=True, upload_to="lessons/media/"),
                ),
                ("media_url", models.URLField(blank=True)),
                ("language", models.CharField(blank=True, max_length=20)),
                ("is_executable", models.BooleanField(default=False)),
                ("expected_output", models.TextField(blank=True)),
                ("question_data", models.JSONField(blank=True, null=True)),
                ("order", models.IntegerField()),
                ("is_optional", models.BooleanField(default=False)),
                ("estimated_time_seconds", models.IntegerField(default=60)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blocks",
                        to="courses.lesson",
                    ),
                ),
            ],
            options={
                "db_table": "lesson_blocks",
                "ordering": ["lesson", "order"],
            },
        ),
        migrations.CreateModel(
            name="Module",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("learning_outcomes", models.JSONField(default=list)),
                ("prerequisites", models.JSONField(blank=True, default=list)),
                ("order", models.IntegerField()),
                (
                    "duration_minutes",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(5)]
                    ),
                ),
                ("is_locked", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modules",
                        to="courses.course",
                    ),
                ),
                (
                    "unlock_after_module",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="unlocks",
                        to="courses.module",
                    ),
                ),
            ],
            options={
                "db_table": "course_modules",
                "ordering": ["course", "order"],
            },
        ),
        migrations.AddField(
            model_name="lesson",
            name="module",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="lessons",
                to="courses.module",
            ),
        ),
        migrations.CreateModel(
            name="UserCourseEnrollment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "progress_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("completed_lessons", models.IntegerField(default=0)),
                ("total_study_time_minutes", models.IntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("enrolled", "Enrolled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("paused", "Paused"),
                        ],
                        default="enrolled",
                        max_length=20,
                    ),
                ),
                ("enrolled_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("last_accessed", models.DateTimeField(blank=True, null=True)),
                ("certificate_issued", models.BooleanField(default=False)),
                ("certificate_url", models.URLField(blank=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="courses.course"
                    ),
                ),
                (
                    "current_lesson",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.lesson",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_course_enrollments",
            },
        ),
        migrations.CreateModel(
            name="LessonProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_completed", models.BooleanField(default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("completion_time_seconds", models.IntegerField(default=0)),
                ("score", models.IntegerField(blank=True, null=True)),
                ("max_score", models.IntegerField(blank=True, null=True)),
                ("attempts", models.IntegerField(default=0)),
                ("completed_blocks", models.JSONField(default=list)),
                ("block_responses", models.JSONField(default=dict)),
                ("xp_earned", models.IntegerField(default=0)),
                ("perfect_completion", models.BooleanField(default=False)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("last_accessed", models.DateTimeField(auto_now=True)),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="courses.lesson"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "enrollment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.usercourseenrollment",
                    ),
                ),
            ],
            options={
                "db_table": "lesson_progress",
            },
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(fields=["slug"], name="courses_slug_360be0_idx"),
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(
                fields=["level", "is_published"], name="courses_level_0e87e0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(
                fields=["category", "is_published"], name="courses_categor_5cca14_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(
                fields=["-rating", "is_published"], name="courses_rating_932f61_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="block",
            index=models.Index(
                fields=["lesson", "order"], name="lesson_bloc_lesson__0152a9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="block",
            index=models.Index(
                fields=["block_type"], name="lesson_bloc_block_t_6e05f3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="module",
            index=models.Index(
                fields=["course", "order"], name="course_modu_course__2c6358_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="module",
            unique_together={("course", "order")},
        ),
        migrations.AddIndex(
            model_name="lesson",
            index=models.Index(
                fields=["module", "order"], name="lessons_module__1db223_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="lesson",
            index=models.Index(
                fields=["lesson_type"], name="lessons_lesson__5ca97f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="lesson",
            unique_together={("module", "slug")},
        ),
        migrations.AddIndex(
            model_name="usercourseenrollment",
            index=models.Index(
                fields=["user", "status"], name="user_course_user_id_db5957_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usercourseenrollment",
            index=models.Index(
                fields=["course", "status"], name="user_course_course__03826a_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="usercourseenrollment",
            unique_together={("user", "course")},
        ),
        migrations.AddIndex(
            model_name="lessonprogress",
            index=models.Index(
                fields=["user", "lesson"], name="lesson_prog_user_id_60b051_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="lessonprogress",
            index=models.Index(
                fields=["enrollment", "is_completed"],
                name="lesson_prog_enrollm_9b2eb0_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="lessonprogress",
            unique_together={("user", "lesson")},
        ),
    ]

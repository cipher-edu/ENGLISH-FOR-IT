# Generated by Django 5.0.14 on 2025-10-24 11:27

import datetime
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("courses", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Word",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("term", models.CharField(db_index=True, max_length=100)),
                ("definition", models.TextField()),
                (
                    "part_of_speech",
                    models.CharField(
                        choices=[
                            ("noun", "Noun"),
                            ("verb", "Verb"),
                            ("adjective", "Adjective"),
                            ("adverb", "Adverb"),
                            ("phrase", "Phrase"),
                            ("idiom", "Idiom"),
                            ("abbreviation", "Abbreviation"),
                        ],
                        max_length=20,
                    ),
                ),
                ("pronunciation_ipa", models.CharField(blank=True, max_length=100)),
                ("audio_url", models.URLField(blank=True)),
                ("example_sentence", models.TextField()),
                ("code_context", models.TextField(blank=True)),
                (
                    "synonyms",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "antonyms",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "related_terms",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("subcategory", models.CharField(blank=True, max_length=50)),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=30),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "Easy"),
                            ("medium", "Medium"),
                            ("hard", "Hard"),
                            ("expert", "Expert"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("frequency_rank", models.IntegerField(blank=True, null=True)),
                (
                    "technology_stack",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=30),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("documentation_links", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "appears_in_lessons",
                    models.ManyToManyField(blank=True, to="courses.lesson"),
                ),
            ],
            options={
                "db_table": "words",
                "ordering": ["term"],
            },
        ),
        migrations.CreateModel(
            name="VocabularyQuiz",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "quiz_type",
                    models.CharField(
                        choices=[
                            ("flashcard", "Flashcard"),
                            ("multiple_choice", "Multiple Choice"),
                            ("type_in", "Type In"),
                            ("listening", "Listening"),
                            ("matching", "Matching"),
                            ("context", "Context Clues"),
                        ],
                        max_length=20,
                    ),
                ),
                ("total_questions", models.IntegerField()),
                ("correct_answers", models.IntegerField(default=0)),
                ("incorrect_answers", models.IntegerField(default=0)),
                ("skipped_questions", models.IntegerField(default=0)),
                ("score", models.IntegerField(default=0)),
                (
                    "accuracy_percentage",
                    models.DecimalField(decimal_places=2, max_digits=5, null=True),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("duration_seconds", models.IntegerField(blank=True, null=True)),
                ("xp_earned", models.IntegerField(default=0)),
                ("coins_earned", models.IntegerField(default=0)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("words", models.ManyToManyField(to="vocabulary.word")),
            ],
            options={
                "db_table": "vocabulary_quizzes",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="QuizQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question_text", models.TextField()),
                ("question_type", models.CharField(max_length=20)),
                ("options", models.JSONField(blank=True, null=True)),
                ("correct_answer", models.CharField(max_length=200)),
                ("user_answer", models.CharField(blank=True, max_length=200)),
                ("is_correct", models.BooleanField(null=True)),
                ("response_time_seconds", models.IntegerField(null=True)),
                ("question_number", models.IntegerField()),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="vocabulary.vocabularyquiz",
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="vocabulary.word",
                    ),
                ),
            ],
            options={
                "db_table": "quiz_questions",
                "ordering": ["quiz", "question_number"],
            },
        ),
        migrations.CreateModel(
            name="WordCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(max_length=120, unique=True)),
                ("description", models.TextField()),
                ("icon", models.CharField(blank=True, max_length=50)),
                ("order", models.IntegerField(default=0)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="vocabulary.wordcategory",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Word categories",
                "db_table": "word_categories",
                "ordering": ["order", "name"],
            },
        ),
        migrations.AddField(
            model_name="word",
            name="category",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="vocabulary.wordcategory",
            ),
        ),
        migrations.CreateModel(
            name="WordSet",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("is_public", models.BooleanField(default=True)),
                ("is_official", models.BooleanField(default=False)),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=30),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("difficulty", models.CharField(blank=True, max_length=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.course",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lesson",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.lesson",
                    ),
                ),
            ],
            options={
                "db_table": "word_sets",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="vocabularyquiz",
            name="word_set",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="vocabulary.wordset",
            ),
        ),
        migrations.CreateModel(
            name="WordSetItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.IntegerField(default=0)),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="vocabulary.word",
                    ),
                ),
                (
                    "word_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="vocabulary.wordset",
                    ),
                ),
            ],
            options={
                "db_table": "word_set_items",
                "ordering": ["order"],
            },
        ),
        migrations.AddField(
            model_name="wordset",
            name="words",
            field=models.ManyToManyField(
                through="vocabulary.WordSetItem", to="vocabulary.word"
            ),
        ),
        migrations.CreateModel(
            name="UserWord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("repetitions", models.IntegerField(default=0)),
                ("easiness_factor", models.FloatField(default=2.5)),
                ("interval", models.IntegerField(default=1)),
                ("next_review", models.DateTimeField(default=datetime.datetime.now)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("learning", "Learning"),
                            ("review", "Review"),
                            ("learned", "Learned"),
                            ("ignored", "Ignored"),
                        ],
                        default="new",
                        max_length=10,
                    ),
                ),
                ("times_reviewed", models.IntegerField(default=0)),
                ("times_correct", models.IntegerField(default=0)),
                ("times_incorrect", models.IntegerField(default=0)),
                ("streak", models.IntegerField(default=0)),
                ("average_response_time", models.FloatField(blank=True, null=True)),
                (
                    "last_response_quality",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "confidence_level",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("first_seen", models.DateTimeField(auto_now_add=True)),
                ("last_reviewed", models.DateTimeField(blank=True, null=True)),
                ("learned_date", models.DateTimeField(blank=True, null=True)),
                ("personal_note", models.TextField(blank=True)),
                ("custom_example", models.TextField(blank=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="vocabulary.word",
                    ),
                ),
            ],
            options={
                "db_table": "user_words",
                "indexes": [
                    models.Index(
                        fields=["user", "status"], name="user_words_user_id_043616_idx"
                    ),
                    models.Index(
                        fields=["user", "next_review"],
                        name="user_words_user_id_ec418e_idx",
                    ),
                    models.Index(
                        fields=["user", "-confidence_level"],
                        name="user_words_user_id_a156a5_idx",
                    ),
                ],
                "unique_together": {("user", "word")},
            },
        ),
        migrations.AddIndex(
            model_name="word",
            index=models.Index(fields=["term"], name="words_term_cbfa90_idx"),
        ),
        migrations.AddIndex(
            model_name="word",
            index=models.Index(
                fields=["category", "difficulty"], name="words_categor_772a38_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="word",
            index=models.Index(
                fields=["frequency_rank"], name="words_frequen_04c2ae_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vocabularyquiz",
            index=models.Index(
                fields=["user", "-started_at"], name="vocabulary__user_id_1c62ec_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vocabularyquiz",
            index=models.Index(
                fields=["quiz_type"], name="vocabulary__quiz_ty_2bb45b_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="wordsetitem",
            unique_together={("word_set", "word")},
        ),
        migrations.AddIndex(
            model_name="wordset",
            index=models.Index(
                fields=["created_by", "is_public"], name="word_sets_created_16a3d5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="wordset",
            index=models.Index(fields=["course"], name="word_sets_course__6cb915_idx"),
        ),
    ]

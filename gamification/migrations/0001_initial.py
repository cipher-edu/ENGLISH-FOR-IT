# Generated by Django 5.0.14 on 2025-10-24 11:27

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("corporate", "0001_initial"),
        ("courses", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Badge",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "badge_type",
                    models.CharField(
                        choices=[
                            ("achievement", "Achievement"),
                            ("milestone", "Milestone"),
                            ("skill", "Skill"),
                            ("special", "Special Event"),
                            ("level", "Level"),
                        ],
                        max_length=20,
                    ),
                ),
                ("icon", models.ImageField(upload_to="badges/")),
                ("color_scheme", models.CharField(default="#4CAF50", max_length=7)),
                ("criteria", models.JSONField()),
                ("auto_award", models.BooleanField(default=True)),
                ("xp_reward", models.IntegerField(default=0)),
                ("coins_reward", models.IntegerField(default=0)),
                (
                    "rarity",
                    models.CharField(
                        choices=[
                            ("common", "Common"),
                            ("uncommon", "Uncommon"),
                            ("rare", "Rare"),
                            ("epic", "Epic"),
                            ("legendary", "Legendary"),
                        ],
                        default="common",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "badges",
                "ordering": ["badge_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="Challenge",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "challenge_type",
                    models.CharField(
                        choices=[
                            ("daily", "Daily Challenge"),
                            ("weekly", "Weekly Challenge"),
                            ("special", "Special Event"),
                        ],
                        max_length=20,
                    ),
                ),
                ("tasks", models.JSONField()),
                ("target_value", models.IntegerField()),
                ("xp_reward", models.IntegerField(default=50)),
                ("coins_reward", models.IntegerField(default=10)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "badge",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="gamification.badge",
                    ),
                ),
            ],
            options={
                "db_table": "challenges",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="Leaderboard",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "leaderboard_type",
                    models.CharField(
                        choices=[
                            ("global", "Global"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("course", "Course"),
                            ("company", "Company"),
                            ("friends", "Friends"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "period",
                    models.CharField(
                        choices=[
                            ("all_time", "All Time"),
                            ("this_week", "This Week"),
                            ("this_month", "This Month"),
                            ("today", "Today"),
                        ],
                        default="all_time",
                        max_length=20,
                    ),
                ),
                (
                    "metric",
                    models.CharField(
                        choices=[
                            ("xp", "XP Points"),
                            ("streak", "Streak Days"),
                            ("lessons", "Lessons Completed"),
                            ("words", "Words Learned"),
                            ("accuracy", "Accuracy"),
                        ],
                        default="xp",
                        max_length=20,
                    ),
                ),
                ("min_participants", models.IntegerField(default=5)),
                ("max_display", models.IntegerField(default=100)),
                ("last_updated", models.DateTimeField(null=True)),
                ("cached_rankings", models.JSONField(default=list)),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="corporate.company",
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.course",
                    ),
                ),
            ],
            options={
                "db_table": "leaderboards",
            },
        ),
        migrations.CreateModel(
            name="LeaderboardEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rank", models.IntegerField()),
                ("previous_rank", models.IntegerField(null=True)),
                ("score", models.IntegerField()),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "leaderboard",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gamification.leaderboard",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "leaderboard_entries",
                "ordering": ["rank"],
            },
        ),
        migrations.CreateModel(
            name="UserBadge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("earned_at", models.DateTimeField(auto_now_add=True)),
                ("progress", models.JSONField(default=dict)),
                ("is_featured", models.BooleanField(default=False)),
                (
                    "badge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gamification.badge",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_badges",
            },
        ),
        migrations.CreateModel(
            name="UserChallenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("current_progress", models.IntegerField(default=0)),
                ("is_completed", models.BooleanField(default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("rewards_claimed", models.BooleanField(default=False)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gamification.challenge",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_challenges",
            },
        ),
        migrations.CreateModel(
            name="XPTransaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("amount", models.IntegerField()),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("lesson", "Lesson Completion"),
                            ("quiz", "Quiz"),
                            ("challenge", "Challenge"),
                            ("achievement", "Achievement"),
                            ("bonus", "Bonus"),
                            ("penalty", "Penalty"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.CharField(max_length=255)),
                ("object_id", models.CharField(max_length=255, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "xp_transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="challenge",
            index=models.Index(
                fields=["challenge_type", "is_active"],
                name="challenges_challen_d8795b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="challenge",
            index=models.Index(
                fields=["start_date", "end_date"], name="challenges_start_d_5caac7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="leaderboard",
            index=models.Index(
                fields=["leaderboard_type", "period"],
                name="leaderboard_leaderb_fd7fbf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="leaderboardentry",
            index=models.Index(
                fields=["leaderboard", "rank"], name="leaderboard_leaderb_bb9735_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="leaderboardentry",
            index=models.Index(
                fields=["user", "leaderboard"], name="leaderboard_user_id_c34632_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="leaderboardentry",
            unique_together={("leaderboard", "user")},
        ),
        migrations.AddIndex(
            model_name="userbadge",
            index=models.Index(
                fields=["user", "earned_at"], name="user_badges_user_id_9b4c5f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userbadge",
            index=models.Index(
                fields=["user", "is_featured"], name="user_badges_user_id_96bbe1_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userbadge",
            unique_together={("user", "badge")},
        ),
        migrations.AddIndex(
            model_name="userchallenge",
            index=models.Index(
                fields=["user", "challenge"], name="user_challe_user_id_186a72_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userchallenge",
            index=models.Index(
                fields=["user", "is_completed"], name="user_challe_user_id_90ac41_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userchallenge",
            unique_together={("user", "challenge")},
        ),
        migrations.AddIndex(
            model_name="xptransaction",
            index=models.Index(
                fields=["user", "-created_at"], name="xp_transact_user_id_616108_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="xptransaction",
            index=models.Index(
                fields=["transaction_type"], name="xp_transact_transac_920d26_idx"
            ),
        ),
    ]

# Generated by Django 5.0.14 on 2025-10-24 11:27

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("courses", "0001_initial"),
        ("vocabulary", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PeerReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("overall_feedback", models.TextField()),
                ("strengths", models.JSONField(default=list)),
                ("improvements", models.JSONField(default=list)),
                ("inline_comments", models.JSONField(default=list)),
                (
                    "helpfulness_rating",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "clarity_rating",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "grammar_rating",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("is_helpful", models.BooleanField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "reviewer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "peer_reviews",
            },
        ),
        migrations.CreateModel(
            name="WritingSubmission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        validators=[django.core.validators.MinLengthValidator(10)]
                    ),
                ),
                ("word_count", models.IntegerField()),
                ("version", models.IntegerField(default=1)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("submitted", "Submitted"),
                            ("reviewing", "Under Review"),
                            ("reviewed", "Reviewed"),
                            ("revised", "Revised"),
                        ],
                        default="draft",
                        max_length=10,
                    ),
                ),
                ("ai_feedback", models.JSONField(blank=True, null=True)),
                ("grammar_errors", models.JSONField(default=list)),
                ("style_suggestions", models.JSONField(default=list)),
                ("vocabulary_analysis", models.JSONField(default=dict)),
                (
                    "grammar_score",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "vocabulary_score",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "coherence_score",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "task_completion_score",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "overall_score",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("time_spent_seconds", models.IntegerField(default=0)),
                ("xp_earned", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("submitted_at", models.DateTimeField(blank=True, null=True)),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "peer_reviews",
                    models.ManyToManyField(
                        related_name="reviewed_writings",
                        through="writing.PeerReview",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "previous_version",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="writing.writingsubmission",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "writing_submissions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="peerreview",
            name="submission",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="writing.writingsubmission",
            ),
        ),
        migrations.CreateModel(
            name="WritingTask",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("instructions", models.TextField()),
                ("context", models.TextField()),
                ("requirements", models.JSONField()),
                ("grammar_focus", models.JSONField(default=list)),
                ("word_limit_min", models.IntegerField(default=50)),
                ("word_limit_max", models.IntegerField(default=500)),
                ("time_limit_minutes", models.IntegerField(blank=True, null=True)),
                ("level", models.CharField(max_length=2)),
                (
                    "difficulty",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("xp_reward", models.IntegerField(default=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "lesson",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.lesson",
                    ),
                ),
                (
                    "vocabulary_hints",
                    models.ManyToManyField(blank=True, to="vocabulary.word"),
                ),
            ],
            options={
                "db_table": "writing_tasks",
                "ordering": ["level", "difficulty"],
            },
        ),
        migrations.AddField(
            model_name="writingsubmission",
            name="task",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="writing.writingtask"
            ),
        ),
        migrations.CreateModel(
            name="WritingTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("documentation", "Documentation"),
                            ("bug_report", "Bug Report"),
                            ("proposal", "Project Proposal"),
                            ("review", "Code Review"),
                            ("standup", "Standup Update"),
                            ("readme", "README"),
                            ("api_doc", "API Documentation"),
                            ("user_story", "User Story"),
                            ("post_mortem", "Post-Mortem"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("structure", models.JSONField()),
                ("example_content", models.TextField()),
                (
                    "key_phrases",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=200),
                        default=list,
                        size=None,
                    ),
                ),
                ("dos_and_donts", models.JSONField(default=dict)),
                ("level", models.CharField(max_length=2)),
                ("min_words", models.IntegerField(default=50)),
                ("max_words", models.IntegerField(default=500)),
                ("evaluation_criteria", models.JSONField()),
                ("sample_feedback", models.JSONField(default=list)),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=30),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "writing_templates",
                "ordering": ["template_type", "level"],
                "indexes": [
                    models.Index(
                        fields=["template_type", "level"],
                        name="writing_tem_templat_a8111a_idx",
                    )
                ],
            },
        ),
        migrations.AddField(
            model_name="writingtask",
            name="template",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="writing.writingtemplate",
            ),
        ),
        migrations.AddIndex(
            model_name="peerreview",
            index=models.Index(
                fields=["submission", "reviewer"], name="peer_review_submiss_d93ac2_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="peerreview",
            unique_together={("submission", "reviewer")},
        ),
        migrations.AddIndex(
            model_name="writingsubmission",
            index=models.Index(
                fields=["user", "status"], name="writing_sub_user_id_76a581_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="writingsubmission",
            index=models.Index(
                fields=["task", "status"], name="writing_sub_task_id_929986_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="writingsubmission",
            index=models.Index(
                fields=["-created_at"], name="writing_sub_created_340fec_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="writingtask",
            index=models.Index(
                fields=["level", "difficulty"], name="writing_tas_level_e10a63_idx"
            ),
        ),
    ]

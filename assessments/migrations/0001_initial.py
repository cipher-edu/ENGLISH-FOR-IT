# Generated by Django 5.0.14 on 2025-10-24 11:29

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("courses", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CertificateTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("html_template", models.TextField()),
                ("css_styles", models.TextField()),
                ("logo", models.ImageField(upload_to="certificate_templates/")),
                (
                    "signature_image",
                    models.ImageField(null=True, upload_to="certificate_templates/"),
                ),
                (
                    "background_image",
                    models.ImageField(null=True, upload_to="certificate_templates/"),
                ),
                (
                    "paper_size",
                    models.CharField(
                        choices=[("A4", "A4"), ("Letter", "Letter")],
                        default="A4",
                        max_length=10,
                    ),
                ),
                (
                    "orientation",
                    models.CharField(
                        choices=[("portrait", "Portrait"), ("landscape", "Landscape")],
                        default="landscape",
                        max_length=10,
                    ),
                ),
                ("is_default", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "certificate_templates",
            },
        ),
        migrations.CreateModel(
            name="Assessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "assessment_type",
                    models.CharField(
                        choices=[
                            ("placement", "Placement Test"),
                            ("module", "Module Test"),
                            ("final", "Final Assessment"),
                            ("diagnostic", "Diagnostic Test"),
                            ("practice", "Practice Test"),
                            ("certification", "Certification Exam"),
                        ],
                        max_length=20,
                    ),
                ),
                ("sections", models.JSONField()),
                ("total_questions", models.IntegerField()),
                ("time_limit_minutes", models.IntegerField(blank=True, null=True)),
                (
                    "passing_score",
                    models.IntegerField(
                        default=70,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("max_attempts", models.IntegerField(default=3)),
                ("level", models.CharField(max_length=2)),
                ("awards_certificate", models.BooleanField(default=False)),
                ("randomize_questions", models.BooleanField(default=True)),
                ("show_correct_answers", models.BooleanField(default=True)),
                ("allow_review", models.BooleanField(default=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.course",
                    ),
                ),
                (
                    "module",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.module",
                    ),
                ),
                (
                    "prerequisites",
                    models.ManyToManyField(blank=True, to="assessments.assessment"),
                ),
                (
                    "certificate_template",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="assessments.certificatetemplate",
                    ),
                ),
            ],
            options={
                "db_table": "assessments",
                "ordering": ["assessment_type", "title"],
            },
        ),
        migrations.CreateModel(
            name="AssessmentAttempt",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("attempt_number", models.IntegerField(default=1)),
                ("current_question_index", models.IntegerField(default=0)),
                ("questions_answered", models.IntegerField(default=0)),
                ("is_completed", models.BooleanField(default=False)),
                (
                    "score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("passed", models.BooleanField(null=True)),
                ("section_scores", models.JSONField(default=dict)),
                ("skill_breakdown", models.JSONField(default=dict)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("time_spent_seconds", models.IntegerField(default=0)),
                ("question_order", models.JSONField(default=list)),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessments.assessment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "assessment_attempts",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="Certificate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("certificate_number", models.CharField(max_length=50, unique=True)),
                ("score", models.DecimalField(decimal_places=2, max_digits=5)),
                ("level_achieved", models.CharField(max_length=50)),
                ("pdf_file", models.FileField(upload_to="certificates/")),
                ("verification_code", models.CharField(max_length=100, unique=True)),
                ("qr_code", models.ImageField(null=True, upload_to="certificates/qr/")),
                ("issued_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessments.assessment",
                    ),
                ),
                (
                    "attempt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessments.assessmentattempt",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "certificates",
                "ordering": ["-issued_at"],
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("question_text", models.TextField()),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("multiple_choice", "Multiple Choice"),
                            ("true_false", "True/False"),
                            ("fill_blank", "Fill in the Blank"),
                            ("matching", "Matching"),
                            ("ordering", "Ordering"),
                            ("essay", "Essay"),
                            ("code", "Code Writing"),
                            ("audio", "Audio Response"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "skill_type",
                    models.CharField(
                        choices=[
                            ("reading", "Reading"),
                            ("listening", "Listening"),
                            ("grammar", "Grammar"),
                            ("vocabulary", "Vocabulary"),
                            ("writing", "Writing"),
                            ("speaking", "Speaking"),
                        ],
                        max_length=20,
                    ),
                ),
                ("context", models.TextField(blank=True)),
                (
                    "media_file",
                    models.FileField(
                        blank=True, null=True, upload_to="assessments/media/"
                    ),
                ),
                ("options", models.JSONField(blank=True, default=list)),
                ("correct_answer", models.JSONField()),
                ("points", models.IntegerField(default=1)),
                ("partial_credit_allowed", models.BooleanField(default=False)),
                (
                    "difficulty",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=30),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("explanation", models.TextField(blank=True)),
                ("times_used", models.IntegerField(default=0)),
                ("times_answered_correctly", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "assessment_questions",
                "indexes": [
                    models.Index(
                        fields=["question_type", "skill_type"],
                        name="assessment__questio_ff40ed_idx",
                    ),
                    models.Index(
                        fields=["difficulty"], name="assessment__difficu_734caa_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Answer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_answer", models.JSONField()),
                ("is_correct", models.BooleanField(null=True)),
                (
                    "points_earned",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("ai_feedback", models.TextField(blank=True)),
                ("manual_feedback", models.TextField(blank=True)),
                ("time_spent_seconds", models.IntegerField(null=True)),
                ("answered_at", models.DateTimeField(auto_now_add=True)),
                (
                    "attempt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessments.assessmentattempt",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessments.question",
                    ),
                ),
            ],
            options={
                "db_table": "assessment_answers",
            },
        ),
        migrations.AddIndex(
            model_name="assessmentattempt",
            index=models.Index(
                fields=["user", "assessment"], name="assessment__user_id_da3461_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="assessmentattempt",
            index=models.Index(
                fields=["-started_at"], name="assessment__started_7bde83_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="assessmentattempt",
            unique_together={("user", "assessment", "attempt_number")},
        ),
        migrations.AddIndex(
            model_name="certificate",
            index=models.Index(
                fields=["user", "-issued_at"], name="certificate_user_id_a74be4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="certificate",
            index=models.Index(
                fields=["certificate_number"], name="certificate_certifi_1d3ba1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="certificate",
            index=models.Index(
                fields=["verification_code"], name="certificate_verific_8df4b9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="assessment",
            index=models.Index(
                fields=["assessment_type", "is_active"],
                name="assessments_assessm_36d222_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="assessment",
            index=models.Index(
                fields=["course", "module"], name="assessments_course__3a6876_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="answer",
            index=models.Index(
                fields=["attempt", "question"], name="assessment__attempt_ccaec9_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="answer",
            unique_together={("attempt", "question")},
        ),
    ]

# Generated by Django 5.0.14 on 2025-10-24 11:27

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("vocabulary", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PronunciationChallenge",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("target_sound", models.CharField(max_length=50)),
                (
                    "example_words",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100), size=None
                    ),
                ),
                (
                    "example_sentences",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), size=None
                    ),
                ),
                ("tongue_position", models.TextField(blank=True)),
                ("mouth_shape", models.TextField(blank=True)),
                ("common_mistakes", models.JSONField(default=list)),
                ("tips", models.JSONField(default=list)),
                ("demo_video_url", models.URLField(blank=True)),
                (
                    "demo_audio_file",
                    models.FileField(null=True, upload_to="pronunciation/demos/"),
                ),
                (
                    "difficulty_level",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
            ],
            options={
                "db_table": "pronunciation_challenges",
                "ordering": ["difficulty_level", "title"],
            },
        ),
        migrations.CreateModel(
            name="SpeakingScenario",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "scenario_type",
                    models.CharField(
                        choices=[
                            ("interview", "Job Interview"),
                            ("standup", "Daily Standup"),
                            ("presentation", "Technical Presentation"),
                            ("meeting", "Team Meeting"),
                            ("phone", "Phone Call"),
                            ("networking", "Networking Event"),
                            ("support", "Customer Support"),
                        ],
                        max_length=20,
                    ),
                ),
                ("context", models.TextField()),
                ("role_description", models.TextField()),
                ("ai_role", models.CharField(max_length=100)),
                ("dialogue_flow", models.JSONField()),
                (
                    "key_phrases",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=200),
                        default=list,
                        size=None,
                    ),
                ),
                ("level", models.CharField(max_length=2)),
                (
                    "difficulty",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("estimated_duration_minutes", models.IntegerField(default=5)),
                ("evaluation_rubric", models.JSONField()),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=30),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "vocabulary_focus",
                    models.ManyToManyField(blank=True, to="vocabulary.word"),
                ),
            ],
            options={
                "db_table": "speaking_scenarios",
                "ordering": ["scenario_type", "level"],
            },
        ),
        migrations.CreateModel(
            name="SpeakingSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_type",
                    models.CharField(
                        choices=[
                            ("scenario", "Scenario Practice"),
                            ("pronunciation", "Pronunciation"),
                            ("free_talk", "Free Talk"),
                            ("shadowing", "Shadowing"),
                            ("reading", "Reading Aloud"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "audio_file",
                    models.FileField(null=True, upload_to="speaking/recordings/%Y/%m/"),
                ),
                ("duration_seconds", models.IntegerField(null=True)),
                ("transcript", models.TextField(blank=True)),
                ("ai_responses", models.JSONField(default=list)),
                ("conversation_history", models.JSONField(default=list)),
                (
                    "pronunciation_score",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "fluency_score",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "accuracy_score",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "vocabulary_score",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("pronunciation_issues", models.JSONField(default=list)),
                ("grammar_corrections", models.JSONField(default=list)),
                ("vocabulary_suggestions", models.JSONField(default=list)),
                ("general_feedback", models.TextField(blank=True)),
                ("completed", models.BooleanField(default=False)),
                ("xp_earned", models.IntegerField(default=0)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "scenario",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="speaking.speakingscenario",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "speaking_sessions",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="UserPronunciationProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("attempts", models.IntegerField(default=0)),
                (
                    "best_score",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("average_score", models.FloatField(default=0)),
                ("is_mastered", models.BooleanField(default=False)),
                ("mastered_at", models.DateTimeField(blank=True, null=True)),
                ("score_history", models.JSONField(default=list)),
                ("last_practiced", models.DateTimeField(null=True)),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="speaking.pronunciationchallenge",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_pronunciation_progress",
            },
        ),
        migrations.AddIndex(
            model_name="speakingscenario",
            index=models.Index(
                fields=["scenario_type", "level"], name="speaking_sc_scenari_54043c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="speakingsession",
            index=models.Index(
                fields=["user", "-started_at"], name="speaking_se_user_id_e96375_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="speakingsession",
            index=models.Index(
                fields=["session_type", "completed"],
                name="speaking_se_session_7b88e7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userpronunciationprogress",
            index=models.Index(
                fields=["user", "is_mastered"], name="user_pronun_user_id_1c9d08_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userpronunciationprogress",
            unique_together={("user", "challenge")},
        ),
    ]
